name: Jhipster 6 Release
on:
  push:
    tags:
      - '*'
jobs:
  pipeline:
      name: jhipster6 pipeline for release
      runs-on: ubuntu-latest
      if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
      timeout-minutes: 40
      env:
          NODE_VERSION: 12.13.1
          SPRING_OUTPUT_ANSI_ENABLED: DETECT
          SPRING_JPA_SHOW_SQL: false
          JHI_DISABLE_WEBPACK_LOGS: true
          NG_CLI_ANALYTICS: false
      steps:
        # Setup du contexte d'exécution, node pour le front
        # Import des packages avec la version associé. Si besoin d'une evolution tous les workflows doivent être modifiés
          - uses: actions/checkout@v1
          - uses: actions/setup-node@v1
            with:
                node-version: 12.13.1
        # Setup du contexte d'exécution, java pour le back
          - uses: actions/setup-java@v1
            with:
                java-version: '11.x'
        # Création d'un cache yarn (frontend) pour accélerer les builds
          - name: Get yarn cache
            id: yarn-cache
            run: echo "::set-output name=dir::$(yarn cache dir)"
          - uses: actions/cache@v1
            with:
              path: ${{ steps.yarn-cache.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                ${{ runner.os }}-yarn-
        # Création d'un cache gradle (backend) pour accélerer les builds
          - uses: actions/cache@v1
            with:
                path: ~/.gradle/caches
                key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
                restore-keys: |
                  ${{ runner.os }}-gradle-
        # Import des packages nodes
          - name: Install node.js packages
            run: yarn install
        # Lancement des tests backend
          - name: Run backend test
            run: |
                chmod +x gradlew
                ./gradlew clean test integrationTest -x webpack
        # Lancement des tests frontend
          - name: Run frontend test
            run: yarn run test
        # Analyse du code avec sonar cloud
          - name: Analyze code with SonarQube
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            run: |
                if [ -n $SONAR_TOKEN ]; then
                    ./gradlew sonarqube --no-daemon -Dsonar.host.url=https://sonarcloud.io
                else
                    echo No SONAR_TOKEN, skipping...
                fi
        # Package du livrable, ici au format jar, mais peut être fait en war avec la commande ./gradlew bootWar...
          - name: Package application
            run: ./gradlew bootJar -Pprod -x test -x integrationTest
        # Publication du livrable dans github package.
          - name: Publish to GitHub Packages
            run: gradle publish
            env:
              USERNAME: ${{ github.actor }}
              PASSWORD: ${{ secrets.GITHUB_TOKEN }}
